#+Title: Emacs Configuration
#+OPTIONS: toc:3 num:nil ^:nil

* Packages
** Cask
   Cask is a dependency manager for Emacs. I have install Cask using brew, which
   puts =cask.el= to =/usr/local/share/emacs/site-lisp/=, so it is already in
   ~load-path~.

   First, we require and interactive Cask.
#+BEGIN_SRC emacs-lisp
(require 'cask)
(cask-initialize)
#+END_SRC
** Pallet
   Pallet keeps the Cask file up-to-date when installing packages through `M-x
   list-packages`.
#+BEGIN_SRC emacs-lisp
(require 'pallet)
#+END_SRC
** Package.el
   Also, we need to set up the package repositories for Emacs's own package
   manager.
#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ;; ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://melpa.org/packages/")))
#+END_SRC
* General Setup
  Don't load outdated compiled files
#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC
* Uniquify
  When two files have the same names.
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
;; helm prefix: "C-x c" => 'C-c h
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "M-l") 'helm-buffers-list)
(global-set-key (kbd "C-x f") 'helm-recentf)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-c h o") 'helm-occur)

(helm-mode 1)
#+END_SRC

* Misc 2
#+BEGIN_SRC emacs-lisp
;;;; global key bindings
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x g") 'magit-status)

;; Window switch
(windmove-default-keybindings) ;; Shift+direction

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

;; This is set by default
;; (global-set-key (kbd "M-<f10>") 'toggle-frame-maximized)
(global-set-key (kbd "M-<f11>") 'toggle-frame-fullscreen)

(global-set-key (kbd "C-x 3") (lambda ()
                                "Split window with another buffer."
                                (interactive)
                                (split-window-right)
                                (other-window 1)
                                (switch-to-buffer (other-buffer))))
(defun swap-windows ()
  "Put the buffer from the selected window in next window, and vice versa"
  (interactive)
  (let* ((this (selected-window))
         (other (next-window))
         (this-buffer (window-buffer this))
         (other-buffer (window-buffer other)))
    (set-window-buffer other this-buffer)
    (set-window-buffer this other-buffer)))

;;;; emacs lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))

(add-hook 'emacs-lisp-mode-hook 'imenu-elisp-sections)

(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)

;; key C-j
(add-hook 'paredit-mode-hook
          (lambda ()
            (define-key paredit-mode-map "\C-j" 'eval-print-last-sexp)))

;;;; C
(setq-default c-default-style "linux"
              c-basic-offset 4)

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;;;;;;;;;;;;
;; geiser ;;
;;;;;;;;;;;;
(setq geiser-default-implementation 'racket)

;;;; Misc

;;;;;;;;;;;;;;;
;; guide key ;;
;;;;;;;;;;;;;;;
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x" "C-x r" "C-x 4" "M-s" "C-c h" "C-c"))
(guide-key-mode 1)  ; Enable guide-key-mode

;; Hightlight current line globally
;; (global-hl-line-mode)

;; Multiple cursor
(require 'multiple-cursors)
;; base on an active region
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; base on keywords
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;;;;;;;;;;;;;;;;
;; Projectile ;;
;;;;;;;;;;;;;;;;

(projectile-global-mode)
(setq projectile-completion-system 'helm)
(require 'helm-projectile)
(helm-projectile-on)

;;;;;;;;;;;;
;; ggtags ;;
;;;;;;;;;;;;
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'asm-mode)
              (ggtags-mode 1))))

(require 'helm-gtags)
;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

;;;;;;;;;;;;;
;; company ;;
;;;;;;;;;;;;;
(add-hook 'after-init-hook 'global-company-mode)

;;;;;;;;;;;;;;;
;; yasnippet ;;
;;;;;;;;;;;;;;;
;; (yas-global-mode 1)

;;;;;;;;;;;;;;
;; nyam Cat ;;
;;;;;;;;;;;;;;
;; disable it, I want to custom mode line
;; (nyan-mode 1)

;; Show column number too
(column-number-mode 1)

;; use powerline
;; (require 'powerline)
;; (powerline-default-theme)

;; do not display some minor mode (use Diminish)
(eval-after-load "helm"
  '(diminish 'helm-mode))

(eval-after-load "guide-key"
  '(diminish 'guide-key-mode))

(eval-after-load "flyspell"
  '(diminish 'flyspell-mode))

(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))

(eval-after-load "company"
  '(diminish 'company-mode))

(eval-after-load "paredit"
  '(diminish 'paredit-mode))

(eval-after-load "git-gutter"
  '(diminish 'git-gutter-mode))

;; (diminish 'yas-minor-mode)

(defmacro rename-modeline (package-name mode new-name)
  `(eval-after-load ,package-name
     '(defadvice ,mode (after rename-modeline activate)
        (setq mode-name ,new-name))))

;; (rename-modeline "js2-mode" js2-mode "JS2")
;; (rename-modeline "clojure-mode" clojure-mode "Clj")

;; Compile
(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))

;;;;;;;;;;;;;;
;; Flycheck ;;
;;;;;;;;;;;;;;

;; Enable globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;;;; Blog with org-mode (org-page)
;;;;;;;;;;;;;;
;; org-page ;;
;;;;;;;;;;;;;;
(require 'org-page)
(setq op/repository-directory "~/wip/blog/") ;; the repository location
(setq op/site-domain "http://xuchunyang.me") ;; your domain
;;; the configuration below you should choose one, not both
(setq op/personal-disqus-shortname "xcysblog")    ;; your disqus commenting system
(setq op/personal-google-analytics-id "UA-52627886-1")
(setq op/personal-github-link "https://github.com/xuchunyang")
(setq op/site-main-title "Chunyang Xu")
(setq op/site-sub-title "")

(setq user-mail-address "xuchunyang56@gmail.com")
(setq user-full-name "Chunyang Xu")

(add-hook 'text-mode-hook 'auto-fill-mode)

;; Example key binding
(setq osx-dictionary-use-chinese-text-segmentation t) ; Support Chinese word
(global-set-key (kbd "C-c d") 'osx-dictionary-search-pointer)

;; Work with popwin-el (https://github.com/m2ym/popwin-el)
(push "*osx-dictionary*" popwin:special-display-config)

;;;; UI
;;
;; 1. Fonts (Both English and Chinese)
;; 2. Color theme
;; 3. Mode line
;; 4. scroll bar
;; 5. Git change notify (idea from git-gutter)
;; 6. brackets/pairs:
;;    - hightlight (show-paren-mode)
;;    - Colorful by different level (rainbow-delimiters-mode)
;; 7. Improve look of `dired-mode'
;;

(global-git-gutter-mode 1)

;; Center text when only one window
;; (when (require 'automargin nil t)
;;   (automargin-mode 1))

;;;; Navigation (between windows, buffers/files, projects(folds))
;;
;; 1. open file (use helm)
;;    - recent file
;;    - file under current directory or in current project
;;    - anyfile in my Computer
;; 2. Switch between Windows
;;    use <S-arror>
;; 3. Switch between buffers
;;    - use helm (helm-buffers-list, etc)


;;;; Tools
;;
;; 1. dictionary tools
;; 2. quickly compile & run, C/Elisp/shell/scheme, etc
;; 3. use Git version within Emacs
;; 4. on-the-fly Grammar check
;;

;;;; Programming Language specified
;;
;; 1. C
;; 2. Emacs Lisp
;; 3. Others
;;

;;;; org-mode (note taking, todo planing, and writing docs)
;;
;; 1. note
;; 2. todo
;; 3. Blogging
;; 4. manage Emacs init files
;;

;; Automatic resizing of Emacs windows to the golden ratio
;; https://github.com/roman/golden-ratio.el
;; (golden-ratio-mode 1)

;; Show org-mode bullets as UTF-8 characters.
;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
#+END_SRC
* Navigation
#+BEGIN_SRC emacs-lisp
;; (setq mouse-autoselect-window t)
(global-auto-revert-mode 1)
#+END_SRC
* Editing
1. edit parens (both lisp mode and other programming mode)
2. Search and Replace (both buffer/file level and project level)
3. Visual Editing, or editing more than one line at the same time
   (via multiple-cursors or Can I fond better way for this?)
4. Completion
5. Spell check on-the-fly (both programming or non-programming modes)

** Spell checking
   =flyspell= provides minor modes to check spell on-the-fly.
#+BEGIN_SRC emacs-lisp
;; flyspell-mode does spell-checking on the fly as you type
(require 'flyspell)
(setq ispell-program-name "aspell" ; use aspell instead of ispell
      ispell-extra-args '("--sug-mode=ultra"))

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC
** Save last edit place
#+BEGIN_SRC emacs-lisp
;; Save point position between sessions
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+END_SRC
** Undo
   Undo tree
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC
** Expand Region
#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
* UI

** Font
   Set English font
#+BEGIN_SRC emacs-lisp
;; Setting English Font
(if (member "Source Code Pro" (font-family-list))
    (set-face-attribute
     'default nil :font "Source Code Pro 14"))
#+END_SRC

** Color theme & Mode line
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC
** Dired Mode
   Add hightlights in dired
   #+BEGIN_SRC emacs-lisp
   (require 'dired-k)
   (define-key dired-mode-map (kbd "K") 'dired-k)
   #+END_SRC

   Make dired less verbose
   #+BEGIN_SRC emacs-lisp
   (require 'dired-details)
   (setq-default dired-details-hidden-string "--- ")
   (dired-details-install)
   #+END_SRC

** Other
   #+BEGIN_SRC emacs-lisp
   ;; Colorful brackets
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function #'ignore)

  ;; Set badckup directory to ~/.emacs.d/backups/
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))


  ;; auto insert pairs
  (electric-pair-mode 1)

  ;; "yes or no" => 'y or n"
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; dired
  (require 'dired-x)
  (setq-default dired-omit-files-p t) ; Buffer-local variable
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  #+END_SRC

** Mac OS X specified
#+BEGIN_SRC emacs-lisp
   (when (eq system-type 'darwin)
     ;; swap <command> and <alt>
     (setq mac-command-modifier 'meta)
     (setq mac-option-modifier 'control)
     ;; Fix PATH
     (exec-path-from-shell-initialize))
   #+END_SRC

** Load custom.el
#+BEGIN_SRC emacs-lisp
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (when (file-readable-p custom-file) (load custom-file 'noerror))
   #+END_SRC
* Email (mu4e)
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
  (require 'mu4e)

  ;; default
  ;; (setq mu4e-maildir "~/Maildir")

  (setq mu4e-drafts-folder "/[Gmail].Drafts")
  (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
  (setq mu4e-trash-folder  "/[Gmail].Trash")

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
  ;; additional non-Gmail addresses and want assign them different
  ;; behavior.)

  ;; setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.

  (setq mu4e-maildir-shortcuts
        '( ("/INBOX"               . ?i)
           ("/[Gmail].Sent Mail"   . ?s)
           ("/[Gmail].Starred"     . ?r)
           ("/[Gmail].Trash"       . ?t)
           ("/[Gmail].All Mail"    . ?a)))

  ;; allow for updating mail using 'U' in the main view:
  (setq mu4e-get-mail-command "proxychains4 offlineimap"
        mu4e-update-interval (* 30 60)    ;; update every 30 minutes
        )

  ;; something about ourselves
  (setq
   user-mail-address "xuchunyang56@gmail.com"
   user-full-name  "Chunyang Xu"
   mu4e-compose-signature "Chunyang Xu")

  ;; sending mail -- replace USERNAME with your gmail username
  ;; also, make sure the gnutls command line utils are installed
  ;; package 'gnutls-bin' in Debian/Ubuntu

  (require 'smtpmail)
  (setq message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 "xuchunyang56@gmail.com" nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;; Confirmation before sending
  (add-hook 'message-send-hook
            (lambda ()
              (unless (yes-or-no-p "Sure you want to send this?")
                (signal 'quit nil))))

  ;; Skipping duplicates
  (setq mu4e-headers-skip-duplicates t)

  ;; email link for org-mode
  (require 'org-mu4e)
#+END_SRC
* IRC (ERC)
#+BEGIN_SRC emacs-lisp
;; Load authentication info from an external source.  Put sensitive
;; passwords and the like in here.
(load "~/.emacs.d/.erc-auth")

;; This is an example of how to make a new command.  Type "/uptime" to
;; use it.
(defun erc-cmd-UPTIME (&rest ignore)
  "Display the uptime of the system, as well as some load-related
     stuff, to the current ERC buffer."
  (let ((uname-output
         (replace-regexp-in-string
          ", load average: " "] {Load average} ["
          ;; Collapse spaces, remove
          (replace-regexp-in-string
           " +" " "
           ;; Remove beginning and trailing whitespace
           (replace-regexp-in-string
            "^ +\\|[ \n]+$" ""
            (shell-command-to-string "uptime"))))))
    (erc-send-message
     (concat "{Uptime} [" uname-output "]"))))

;; Make C-c RET (or C-c C-RET) send messages instead of RET.  This has
;; been commented out to avoid confusing new users.
;; (define-key erc-mode-map (kbd "RET") nil)
;; (define-key erc-mode-map (kbd "C-c RET") 'erc-send-current-line)
;; (define-key erc-mode-map (kbd "C-c C-RET") 'erc-send-current-line)

;;; Options

;; Join the #emacs and #erc channels whenever connecting to Freenode.
(setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#archlinux")))

;; Rename server buffers to reflect the current network name instead
;; of IP:PORT. (e.g. "freenode" instead of "84.240.3.129:6667"). This
;; is useful when using a bouncer like ZNC where you have multiple
;; connections to the same server.
(setq erc-rename-buffers t)

;; Interpret mIRC-style color commands in IRC chats
(setq erc-interpret-mirc-color t)

;; The following are commented out by default, but users of other
;; non-Emacs IRC clients might find them useful.
;; Kill buffers for channels after /part
;; (setq erc-kill-buffer-on-part t)
;; Kill buffers for private queries after quitting the server
;; (setq erc-kill-queries-on-quit t)
;; Kill buffers for server messages after quitting the server
;; (setq erc-kill-server-buffer-on-quit t)

;; logging
(require 'erc-log)
(setq erc-log-channels-directory "~/.erc/logs/")

(defun start-irc ()
  "Connect to IRC."
  (interactive)
  (when (y-or-n-p "Do you want to start IRC? ")
    (erc :server "irc.freenode.net" :port 6667 :nick erc-nick)))

(defun filter-server-buffers ()
  (delq nil
        (mapcar
         (lambda (x) (and (erc-server-buffer-p x) x))
         (buffer-list))))

(defun stop-irc ()
  "Disconnects from all irc servers"
  (interactive)
  (dolist (buffer (filter-server-buffers))
    (message "Server buffer: %s" (buffer-name buffer))
    (with-current-buffer buffer
      (erc-quit-server "Asta la vista"))))
#+END_SRC
* Prettyify Emacs
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
* TAGS
Set up TAGS for Emacs sources
#+BEGIN_SRC emacs-lisp
(setq tags-table-list
      '("~/repos/emacs/src" "~/repos/emacs/lisp"))
#+END_SRC
* Quickly Find Emacs Lisp Sources
  #+BEGIN_SRC emacs-lisp
  (define-key 'help-command (kbd "C-l") 'find-library)
  (define-key 'help-command (kbd "C-f") 'find-function)
  (define-key 'help-command (kbd "C-k") 'find-function-on-key)
  (define-key 'help-command (kbd "C-v") 'find-variable)
  #+END_SRC
** elisp-slime-nav
   Slime-style navigation of Emacs Lisp source with M-. & M-,
   #+BEGIN_SRC emacs-lisp
   ;; (require 'elisp-slime-nav)
   ;; (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
   ;;   (add-hook hook 'elisp-slime-nav-mode))
   #+END_SRC
* SX -- Stack Exchange for Emacs
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/repos/sx.el/")
  (require 'sx-load)
  #+END_SRC
* eshell
  #+BEGIN_SRC emacs-lisp
  (setq eshell-history-size 512)
  (setq eshell-prompt-regexp "^.*> ")

  (require 'em-hist)          ; So the history vars are defined
  (if (boundp 'eshell-save-history-on-exit)
      (setq eshell-save-history-on-exit t)) ; Don't ask, just save
                                          ;(message "eshell-ask-to-save-history is %s" eshell-ask-to-save-history)
  (if (boundp 'eshell-ask-to-save-history)
      (setq eshell-ask-to-save-history 'always)) ; For older(?) version
                                          ;(message "eshell-ask-to-save-history is %s" eshell-ask-to-save-history)

  (defun eshell/ef (fname-regexp &rest dir) (ef fname-regexp default-directory))


  ;;; ---- path manipulation

  (defun pwd-repl-home (pwd)
    (interactive)
    (let* ((home (expand-file-name (getenv "HOME")))
           (home-len (length home)))
      (if (and
           (>= (length pwd) home-len)
           (equal home (substring pwd 0 home-len)))
          (concat "~" (substring pwd home-len))
        pwd)))

  (defun curr-dir-git-branch-string (pwd)
    "Returns current git branch as a string, or the empty string if
  PWD is not in a git repo (or the git command is not found)."
    (interactive)
    (when (and (eshell-search-path "git")
               (locate-dominating-file pwd ".git"))
      (let ((git-output (shell-command-to-string (concat "git branch | grep '\\*' | sed -e 's/^\\* //'"))))
        (concat "[g:"
                (if (> (length git-output) 0)
                    (substring git-output 0 -1)
                  "(no branch)")
                "] "))))

  (defun curr-dir-svn-string (pwd)
    (interactive)
    (when (and (eshell-search-path "svn")
               (locate-dominating-file pwd ".svn"))
      (concat "[s:"
              (cond ((string-match-p "/trunk\\(/.*\\)?" pwd)
                     "trunk")
                    ((string-match "/branches/\\([^/]+\\)\\(/.*\\)?" pwd)
                     (match-string 1 pwd))
                    (t
                     "(no branch)"))
              "] ")))

  (setq eshell-prompt-function
        (lambda ()
          (concat
           (or (curr-dir-git-branch-string (eshell/pwd))
               (curr-dir-svn-string (eshell/pwd)))
           ((lambda (p-lst)
              (if (> (length p-lst) 3)
                  (concat
                   (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                              (substring elm 0 1)))
                              (butlast p-lst 3)
                              "/")
                   "/"
                   (mapconcat (lambda (elm) elm)
                              (last p-lst 3)
                              "/"))
                (mapconcat (lambda (elm) elm)
                           p-lst
                           "/")))
            (split-string (pwd-repl-home (eshell/pwd)) "/"))
           "> ")))

  ;; ; From http://www.emacswiki.org/cgi-bin/wiki.pl/EshellWThirtyTwo
  ;; ; Return nil, otherwise you'll see the return from w32-shell-execute
  ;; (defun eshell/open (file)
  ;;   "Invoke (w32-shell-execute \"Open\" FILE) and substitute slashes for
  ;; backslashes"
  ;;   (w32-shell-execute "Open" (substitute ?\\ ?/ (expand-file-name file)))
  ;;   nil)

  (add-hook 'eshell-mode-hook
            (lambda ()
              (local-set-key "\C-c\C-q" 'eshell-kill-process)
              (local-set-key "\C-c\C-k" 'compile)))
  #+END_SRC
* org-mode
  #+BEGIN_SRC emacs-lisp
  (require 'org)
  ;; highlight native code block
  (setq org-src-fontify-natively t)
  (setq org-edit-src-content-indentation 0)

  (setq org-default-notes-file "~/org/task.org")
  (setq org-agenda-files `(,org-default-notes-file))
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/task.org" "Tasks")
           "* TODO %?\n  %i\n%a")
          ("i" "Inbox" entry (file+headline "~/org/task.org" "Inbox")
           "* %?\n  %i\n%a")))

  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (sh . t)
                                 (scheme . t)))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  #+END_SRC
* nyan-mode
  #+BEGIN_SRC emacs-lisp
  (nyan-mode +1)
  #+END_SRC
* ace-jump-mode
  #+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
  #+END_SRC
* Google Search
  #+BEGIN_SRC emacs-lisp
  (setq google-this-keybind (kbd "C-c s"))
  (require 'google-this)
  (google-this-mode 1)
  ;; (global-set-key (kbd "C-c s") 'google-this-mode-submap)
  #+END_SRC
* Chinese
  #+BEGIN_SRC emacs-lisp
  ;; (require 'chinese-pyim)
  ;; (setq pyim-dicts
  ;;       '((:name "bigdict" :file "~/wip/chinese-pyim/pyim-bigdict.txt" :coding utf-8-unix)))
  #+END_SRC
* anzu
provides a minor mode which displays current match and total matches information
in the mode-line in various search modes. 
  #+BEGIN_SRC emacs-lisp
  (require 'anzu)
  (global-anzu-mode +1)

  (set-face-attribute 'anzu-mode-line nil
                      :foreground "yellow" :weight 'bold)

  (custom-set-variables
   '(anzu-mode-lighter "")
   '(anzu-deactivate-region t)
   '(anzu-search-threshold 1000)
   '(anzu-replace-to-string-separator " => "))

  (global-set-key (kbd "M-%") 'anzu-query-replace)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
  #+END_SRC

* Popwin -- easy quit some buffer like HELP
#+BEGIN_SRC emacs-lisp
(popwin-mode 1)
#+END_SRC

* Google Transpose
  #+BEGIN_SRC emacs-lisp
  (setq url-automatic-caching t)
  (load-file "~/wip/google-translate-chinese/google-translate-config.elc")
  (global-set-key (kbd "C-c g") 'google-translate-chinese-search-at-point-and-replace)
  #+END_SRC

* 输入法
  #+BEGIN_SRC emacs-lisp
  (require 'company)
  (require 'company-dabbrev)
  ;; (require 'adaptive-wrap)
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 2)
  (setq company-selection-wrap-around t)
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-ignore-case nil)
  (setq company-require-match nil)

  ;; chinese-pyim
  (load "~/wip/chinese-pyim/chinese-pyim.el")
  (require 'chinese-pyim)

  (setq default-input-method "chinese-pyim")
  (global-set-key (kbd "C-c C-k") 'toggle-input-method)

  #+END_SRC
