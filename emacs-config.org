#+Title: Emacs Configuration
#+OPTIONS: toc:3 num:nil ^:nil

* Packages
** Cask
   Cask is a dependency manager for Emacs. I have install Cask using brew, which
   puts =cask.el= to =/usr/local/share/emacs/site-lisp/=, so it is already in
   ~load-path~.

   First, we require and interactive Cask.
#+BEGIN_SRC emacs-lisp
(require 'cask)
(cask-initialize)
#+END_SRC
** Pallet
   Pallet keeps the Cask file up-to-date when installing packages through `M-x
   list-packages`.
#+BEGIN_SRC emacs-lisp
(require 'pallet)
#+END_SRC
** Package.el
   Also, we need to set up the package repositories for Emacs's own package
   manager.
#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://melpa.org/packages/")))
#+END_SRC
* General Setup
  Don't load outdated compiled files
#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC
* Uniquify
  When two files have the same names.
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
;; helm prefix: "C-x c" => 'C-c h
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "M-l") 'helm-buffers-list)
(global-set-key (kbd "C-x f") 'helm-recentf)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-c h o") 'helm-occur)

(helm-mode 1)
#+END_SRC

* Misc 2
#+BEGIN_SRC emacs-lisp
;;;; global key bindings
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x g") 'magit-status)

;; Window switch
(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

;; This is set by default
;; (global-set-key (kbd "M-<f10>") 'toggle-frame-maximized)
(global-set-key (kbd "M-<f11>") 'toggle-frame-fullscreen)

;;;; emacs lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))

(add-hook 'emacs-lisp-mode-hook 'imenu-elisp-sections)

(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)

;;;; C
(setq-default c-default-style "linux"
              c-basic-offset 4)

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;;;; org-mode
;; highlight native code block
(setq org-src-fontify-natively t)
;;(setq org-src-tab-acts-natively t)

(setq org-default-notes-file "~/todo.org")
(define-key global-map "\C-cc" 'org-capture)

(setq org-edit-src-content-indentation 0)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (sh . t)
   (scheme . t)))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;;;;;;;;;;;;
;; geiser ;;
;;;;;;;;;;;;
(setq geiser-default-implementation 'racket)

;;;; Misc

;;;;;;;;;;;;;;;
;; guide key ;;
;;;;;;;;;;;;;;;
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x" "C-x r" "C-x 4" "M-s" "C-c h" "C-c"))
(guide-key-mode 1)  ; Enable guide-key-mode

;; Hightlight current line globally
;; (global-hl-line-mode)

;; Multiple cursor
(require 'multiple-cursors)
;; base on an active region
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; base on keywords
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;;;;;;;;;;
;; Helm ;;
;;;;;;;;;;

;;;;;;;;;;;;;;;;
;; Projectile ;;
;;;;;;;;;;;;;;;;

(projectile-global-mode)
(setq projectile-completion-system 'helm)
(require 'helm-projectile)
(helm-projectile-on)

;;;;;;;;;;;;
;; ggtags ;;
;;;;;;;;;;;;

(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'asm-mode)
              (ggtags-mode 1))))

(require 'helm-gtags)
;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

;;;;;;;;;;;;;;;;;;;
;; auto-complete ;;
;;;;;;;;;;;;;;;;;;;
;; (ac-config-default)

;;;;;;;;;;;;;
;; company ;;
;;;;;;;;;;;;;
(add-hook 'after-init-hook 'global-company-mode)

;;;;;;;;;;;;;;;
;; yasnippet ;;
;;;;;;;;;;;;;;;
(yas-global-mode 1)

;;;;;;;;;;;;;;
;; nyam Cat ;;
;;;;;;;;;;;;;;
;; disable it, I want to custom mode line
;; (nyan-mode 1)

;; Show column number too
(column-number-mode 1)

;; Mode line
;; see http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html
;; and http://amitp.blogspot.sg/2011/08/emacs-custom-mode-line.html

;; use smart-mode-line for now
;; (sml/setup)

;; use powerline
;; (require 'powerline)
;; (powerline-default-theme)

;; do not display some minor mode (use Diminish)
(eval-after-load "helm"
  '(diminish 'helm-mode))

(eval-after-load "guide-key"
  '(diminish 'guide-key-mode))

(eval-after-load "flyspell"
  '(diminish 'flyspell-mode))

(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))

(diminish 'yas-minor-mode)

(defmacro rename-modeline (package-name mode new-name)
  `(eval-after-load ,package-name
     '(defadvice ,mode (after rename-modeline activate)
        (setq mode-name ,new-name))))

;; (rename-modeline "js2-mode" js2-mode "JS2")
;; (rename-modeline "clojure-mode" clojure-mode "Clj")

;; Compile
(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))

;;;;;;;;;;;;;;
;; Flycheck ;;
;;;;;;;;;;;;;;

;; Enable globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;;;; Blog with org-mode (org-page)
;;;;;;;;;;;;;;
;; org-page ;;
;;;;;;;;;;;;;;
(require 'org-page)
(setq op/repository-directory "~/wip/blog/") ;; the repository location
(setq op/site-domain "http://xuchunyang.me") ;; your domain
;;; the configuration below you should choose one, not both
(setq op/personal-disqus-shortname "xcysblog")    ;; your disqus commenting system
(setq op/personal-google-analytics-id "UA-52627886-1")
(setq op/personal-github-link "https://github.com/xuchunyang")
(setq op/site-main-title "Chunyang Xu")
(setq op/site-sub-title "")

(setq user-mail-address "xuchunyang56@gmail.com")
(setq user-full-name "Chunyang Xu")

(add-hook 'text-mode-hook 'auto-fill-mode)

;; Example key binding
(global-set-key (kbd "C-c d") 'dictionary-search-pointer)

;;;; UI
;;
;; 1. Fonts (Both English and Chinese)
;; 2. Color theme
;; 3. Mode line
;; 4. scroll bar
;; 5. Git change notify (idea from git-gutter)
;; 6. brackets/pairs:
;;    - hightlight (show-paren-mode)
;;    - Colorful by different level (rainbow-delimiters-mode)
;; 7. Improve look of `dired-mode'
;;

(global-git-gutter-mode 1)

;; Center text when only one window
;; (when (require 'automargin nil t)
;;   (automargin-mode 1))

;;;; Navigation (between windows, buffers/files, projects(folds))
;;
;; 1. open file (use helm)
;;    - recent file
;;    - file under current directory or in current project
;;    - anyfile in my Computer
;; 2. Switch between Windows
;;    use <S-arror>
;; 3. Switch between buffers
;;    - use helm (helm-buffers-list, etc)


;;;; Tools
;;
;; 1. dictionary tools
;; 2. quickly compile & run, C/Elisp/shell/scheme, etc
;; 3. use Git version within Emacs
;; 4. on-the-fly Grammar check
;;

;;;; Programming Language specified
;;
;; 1. C
;; 2. Emacs Lisp
;; 3. Others
;;

;;;; org-mode (note taking, todo planing, and writing docs)
;;
;; 1. note
;; 2. todo
;; 3. Blogging
;; 4. manage Emacs init files
;;

;; Mode line
;; (powerline-default-theme)
;; (powerline-raw mode-line-mule-info nil 'l)

;; Automatic resizing of Emacs windows to the golden ratio
;; https://github.com/roman/golden-ratio.el
;; (golden-ratio-mode 1)

;; Show org-mode bullets as UTF-8 characters.
;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
* Navigation
#+BEGIN_SRC emacs-lisp
(setq mouse-autoselect-window t)
(global-auto-revert-mode 1)
#+END_SRC
* Editing
1. edit parens (both lisp mode and other programming mode)
2. Search and Replace (both buffer/file level and project level)
3. Visual Editing, or editing more than one line at the same time
   (via multiple-cursors or Can I fond better way for this?)
4. Completion
5. Spell check on-the-fly (both programming or non-programming modes)

** Spell checking
   =flyspell= provides minor modes to check spell on-the-fly.
#+BEGIN_SRC emacs-lisp
;; flyspell-mode does spell-checking on the fly as you type
(require 'flyspell)
(setq ispell-program-name "aspell" ; use aspell instead of ispell
      ispell-extra-args '("--sug-mode=ultra"))

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC
** Save last edit place
#+BEGIN_SRC emacs-lisp
;; Save point position between sessions
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+END_SRC
** Undo
   Undo tree
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC
** Expand Region
#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
* UI

** Font
   Set English font
#+BEGIN_SRC emacs-lisp
;; Setting English Font
(if (member "Source Code Pro" (font-family-list))
    (set-face-attribute
     'default nil :font "Source Code Pro 14"))
#+END_SRC

** Color theme & Mode line
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC
** Dired Mode
   Add hightlights in dired
   #+BEGIN_SRC emacs-lisp
   (require 'dired-k)
   (define-key dired-mode-map (kbd "K") 'dired-k)
   #+END_SRC

   Make dired less verbose
   #+BEGIN_SRC emacs-lisp
   (require 'dired-details)
   (setq-default dired-details-hidden-string "--- ")
   (dired-details-install)
   #+END_SRC

** Other
   #+BEGIN_SRC emacs-lisp
   ;; Colorful brackets
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function #'ignore)

  ;; Set badckup directory to ~/.emacs.d/backups/
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))


  ;; auto insert pairs
  (electric-pair-mode 1)

  ;; "yes or no" => 'y or n"
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; dired
  (require 'dired-x)
  (setq-default dired-omit-files-p t) ; Buffer-local variable
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  #+END_SRC

** Mac OS X specified
#+BEGIN_SRC emacs-lisp
   (when (eq system-type 'darwin)
     ;; swap <command> and <alt>
     (setq mac-command-modifier 'meta)
     (setq mac-option-modifier 'control)
     ;; Fix PATH
     (exec-path-from-shell-initialize))
   #+END_SRC

** Load custom.el
#+BEGIN_SRC emacs-lisp
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (when (file-readable-p custom-file) (load custom-file 'noerror))
   #+END_SRC
* Email (mu4e)
#+BEGIN_SRC emacs-lisp
(require 'mu4e)

;; default
;; (setq mu4e-maildir "~/Maildir")

(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Trash")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; (See the documentation for `mu4e-sent-messages-behavior' if you have
;; additional non-Gmail addresses and want assign them different
;; behavior.)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
      '( ("/INBOX"               . ?i)
         ("/[Gmail].Sent Mail"   . ?s)
         ("/[Gmail].Trash"       . ?t)
         ("/[Gmail].All Mail"    . ?a)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap"
      mu4e-update-interval (* 30 60)    ;; update every 30 minutes
      )

;; something about ourselves
(setq
 user-mail-address "xuchunyang56@gmail.com"
 user-full-name  "Chunyang Xu"
 mu4e-compose-signature "Chunyang Xu")

;; sending mail -- replace USERNAME with your gmail username
;; also, make sure the gnutls command line utils are installed
;; package 'gnutls-bin' in Debian/Ubuntu

(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
      '(("smtp.gmail.com" 587 "xuchunyang56@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; Confirmation before sending
(add-hook 'message-send-hook
          (lambda ()
            (unless (yes-or-no-p "Sure you want to send this?")
              (signal 'quit nil))))

;; Skipping duplicates
(setq mu4e-headers-skip-duplicates t)

;; email link for org-mode
(require 'org-mu4e)
#+END_SRC
* IRC (ERC)
#+BEGIN_SRC emacs-lisp
;; Load authentication info from an external source.  Put sensitive
;; passwords and the like in here.
(load "~/.emacs.d/.erc-auth")

;; This is an example of how to make a new command.  Type "/uptime" to
;; use it.
(defun erc-cmd-UPTIME (&rest ignore)
  "Display the uptime of the system, as well as some load-related
     stuff, to the current ERC buffer."
  (let ((uname-output
         (replace-regexp-in-string
          ", load average: " "] {Load average} ["
          ;; Collapse spaces, remove
          (replace-regexp-in-string
           " +" " "
           ;; Remove beginning and trailing whitespace
           (replace-regexp-in-string
            "^ +\\|[ \n]+$" ""
            (shell-command-to-string "uptime"))))))
    (erc-send-message
     (concat "{Uptime} [" uname-output "]"))))

;; Make C-c RET (or C-c C-RET) send messages instead of RET.  This has
;; been commented out to avoid confusing new users.
;; (define-key erc-mode-map (kbd "RET") nil)
;; (define-key erc-mode-map (kbd "C-c RET") 'erc-send-current-line)
;; (define-key erc-mode-map (kbd "C-c C-RET") 'erc-send-current-line)

;;; Options

;; Join the #emacs and #erc channels whenever connecting to Freenode.
(setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#archlinux")))

;; Rename server buffers to reflect the current network name instead
;; of IP:PORT. (e.g. "freenode" instead of "84.240.3.129:6667"). This
;; is useful when using a bouncer like ZNC where you have multiple
;; connections to the same server.
(setq erc-rename-buffers t)

;; Interpret mIRC-style color commands in IRC chats
(setq erc-interpret-mirc-color t)

;; The following are commented out by default, but users of other
;; non-Emacs IRC clients might find them useful.
;; Kill buffers for channels after /part
;; (setq erc-kill-buffer-on-part t)
;; Kill buffers for private queries after quitting the server
;; (setq erc-kill-queries-on-quit t)
;; Kill buffers for server messages after quitting the server
;; (setq erc-kill-server-buffer-on-quit t)

;; logging
(require 'erc-log)
(setq erc-log-channels-directory "~/.erc/logs/")

(defun start-irc ()
  "Connect to IRC."
  (interactive)
  (when (y-or-n-p "Do you want to start IRC? ")
    (erc :server "irc.freenode.net" :port 6667 :nick erc-nick)))

(defun filter-server-buffers ()
  (delq nil
        (mapcar
         (lambda (x) (and (erc-server-buffer-p x) x))
         (buffer-list))))

(defun stop-irc ()
  "Disconnects from all irc servers"
  (interactive)
  (dolist (buffer (filter-server-buffers))
    (message "Server buffer: %s" (buffer-name buffer))
    (with-current-buffer buffer
      (erc-quit-server "Asta la vista"))))
#+END_SRC
* Prettyify Emacs
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
