#+Title: Emacs Configuration
#+Author: Chunyang Xu
#+Email: xuchunyang56@gmail.com
#+OPTIONS: toc:3 num:nil ^:nil

# table of contents down to level 2
# no sectione numbers
# don't use TeX syntax for sub and superscripts.
# See http://orgmode.org/manual/Export-options.html

#+BEGIN_SRC emacs-lisp
;;;; global key bindings
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x g") 'magit-status)

;; Window switch
(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

;; This is set by default
;; (global-set-key (kbd "M-<f10>") 'toggle-frame-maximized)
(global-set-key (kbd "M-<f11>") 'toggle-frame-fullscreen)

;;;; emacs lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))

(add-hook 'emacs-lisp-mode-hook 'imenu-elisp-sections)

(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)

;;;; C
(setq-default c-default-style "linux"
              c-basic-offset 4)

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;;;; org-mode
;; highlight native code block
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)

(setq org-default-notes-file "~/todo.org")
(define-key global-map "\C-cc" 'org-capture)

(setq org-edit-src-content-indentation 0)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (sh . t)
   (scheme . t)))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; org-mode with htmlize (code syntax highlight export html)
;; http://yoo2080.wordpress.com/2013/08/26/how-to-make-rainbow-delimiters-mode-work-with-org-mode-export-or-htmlize/
(load "~/.emacs.d/elpa/htmlize/htmlize.elc")
(eval-after-load 'htmlize
  '(progn
     ;; make htmlize to handle face name strings as well
     (defadvice htmlize-attrlist-to-fstruct (around my-make-it-accept-string activate)
       (if (stringp (ad-get-arg 0))
           (progn
             (setq ad-return-value (htmlize-face-to-fstruct (intern (ad-get-arg 0)))))
         ad-do-it))))

(defvar my-htmlize-off-modes nil
  "list of minor modes to disable when using htmlize")

(defun my-htmlize-before-hook-default ()
  (dolist (mode my-htmlize-off-modes)
    (if (fboundp mode)
        (funcall mode 0)))

  (font-lock-fontify-buffer)
  (jit-lock-fontify-now)

  ;; copied from font-lock-default-function (make font-lock-face property act as alias for face property)
  (set (make-local-variable 'char-property-alias-alist)
       (copy-tree char-property-alias-alist))
  (let ((elt (assq 'face char-property-alias-alist)))
    (if elt
        (unless (memq 'font-lock-face (cdr elt))
          (setcdr elt (nconc (cdr elt) (list 'font-lock-face))))
      (push (list 'face 'font-lock-face) char-property-alias-alist))))

(add-hook 'htmlize-before-hook 'my-htmlize-before-hook-default)

;; (add-to-list 'my-htmlize-off-modes 'rainbow-delimiters-mode)

;;;; Scheme

;;;;;;;;;;;;;;;;;
;; smartparens ;;
;;;;;;;;;;;;;;;;;
;; (smartparens-global-mode t)

;;;;;;;;;;;;
;; geiser ;;
;;;;;;;;;;;;
(setq geiser-default-implementation 'racket)

;;;; Misc


;;;;;;;;;;;;;;;
;; guide key ;;
;;;;;;;;;;;;;;;
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x" "C-x r" "C-x 4" "M-s" "C-c h" "C-c"))
(guide-key-mode 1)  ; Enable guide-key-mode

;; Hightlight current line globally
;; (global-hl-line-mode)

;; Multiple cursor
(require 'multiple-cursors)
;; base on an active region
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; base on keywords
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;;;;;;;;;;
;; Helm ;;
;;;;;;;;;;
(require 'helm-config)

;; helm prefix: "C-x c" => 'C-c h
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(helm-mode 1)

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "M-l") 'helm-buffers-list)
(global-set-key (kbd "C-x f") 'helm-recentf)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-c h o") 'helm-occur)

;;;;;;;;;;;;;;;;
;; Projectile ;;
;;;;;;;;;;;;;;;;

(projectile-global-mode)
(setq projectile-completion-system 'helm)
(require 'helm-projectile)
(helm-projectile-on)

;;;;;;;;;;;;
;; ggtags ;;
;;;;;;;;;;;;

(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'asm-mode)
              (ggtags-mode 1))))

(require 'helm-gtags)
;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

;;;;;;;;;;;;;;;;;;;
;; auto-complete ;;
;;;;;;;;;;;;;;;;;;;
;; (ac-config-default)

;;;;;;;;;;;;;
;; company ;;
;;;;;;;;;;;;;
(add-hook 'after-init-hook 'global-company-mode)

;;;;;;;;;;;;;;;
;; yasnippet ;;
;;;;;;;;;;;;;;;
(yas-global-mode 1)

;;;;;;;;;;;;;;
;; nyam Cat ;;
;;;;;;;;;;;;;;
;; disable it, I want to custom mode line
;; (nyan-mode 1)

;; Show column number too
(column-number-mode 1)

;; Mode line
;; see http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html
;; and http://amitp.blogspot.sg/2011/08/emacs-custom-mode-line.html

;; use smart-mode-line for now
;; (sml/setup)

;; use powerline
;; (require 'powerline)
;; (powerline-default-theme)

;; do not display some minor mode (use Diminish)
(eval-after-load "helm"
  '(diminish 'helm-mode))

(eval-after-load "guide-key"
  '(diminish 'guide-key-mode))

(eval-after-load "flyspell"
  '(diminish 'flyspell-mode))

(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))

(diminish 'yas-minor-mode)

(defmacro rename-modeline (package-name mode new-name)
  `(eval-after-load ,package-name
     '(defadvice ,mode (after rename-modeline activate)
        (setq mode-name ,new-name))))

;; (rename-modeline "js2-mode" js2-mode "JS2")
;; (rename-modeline "clojure-mode" clojure-mode "Clj")

;; Compile
(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))

;;;;;;;;;;;;;;
;; Flycheck ;;
;;;;;;;;;;;;;;

;; Enable globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;;;; Blog with org-mode (org-page)
;;;;;;;;;;;;;;
;; org-page ;;
;;;;;;;;;;;;;;
(require 'org-page)
(setq op/repository-directory "~/wip/blog/") ;; the repository location
(setq op/site-domain "http://xuchunyang.me") ;; your domain
;;; the configuration below you should choose one, not both
(setq op/personal-disqus-shortname "xcysblog")    ;; your disqus commenting system
(setq op/personal-google-analytics-id "UA-52627886-1")
(setq op/personal-github-link "https://github.com/xuchunyang")
(setq op/site-main-title "Chunyang Xu")
(setq op/site-sub-title "")

(setq user-mail-address "xuchunyang56@gmail.com")
(setq user-full-name "Chunyang Xu")

(add-hook 'text-mode-hook 'auto-fill-mode)

;; Example key binding
(global-set-key (kbd "C-c d") 'dictionary-search-pointer)

;;;; UI
;;
;; 1. Fonts (Both English and Chinese)
;; 2. Color theme
;; 3. Mode line
;; 4. scroll bar
;; 5. Git change notify (idea from git-gutter)
;; 6. brackets/pairs:
;;    - hightlight (show-paren-mode)
;;    - Colorful by different level (rainbow-delimiters-mode)
;; 7. Improve look of `dired-mode'
;;

(global-git-gutter-mode 1)

;; Center text when only one window
;; (when (require 'automargin nil t)
;;   (automargin-mode 1))

;;;; Navigation (between windows, buffers/files, projects(folds))
;;
;; 1. open file (use helm)
;;    - recent file
;;    - file under current directory or in current project
;;    - anyfile in my Computer
;; 2. Switch between Windows
;;    use <S-arror>
;; 3. Switch between buffers
;;    - use helm (helm-buffers-list, etc)


;;;; Tools
;;
;; 1. dictionary tools
;; 2. quickly compile & run, C/Elisp/shell/scheme, etc
;; 3. use Git version within Emacs
;; 4. on-the-fly Grammar check
;;

;;;; Programming Language specified
;;
;; 1. C
;; 2. Emacs Lisp
;; 3. Others
;;

;;;; org-mode (note taking, todo planing, and writing docs)
;;
;; 1. note
;; 2. todo
;; 3. Blogging
;; 4. manage Emacs init files
;;

;; Mode line
;; (powerline-default-theme)
;; (powerline-raw mode-line-mule-info nil 'l)

;; Automatic resizing of Emacs windows to the golden ratio
;; https://github.com/roman/golden-ratio.el
;; (golden-ratio-mode 1)

;; Show org-mode bullets as UTF-8 characters.
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

* Navigation

** TODO 'C-x 2/3' 更加智能
* Project

* Editing
1. edit parens (both lisp mode and other programming mode)
2. Search and Replace (both buffer/file level and project level)
3. Visual Editing, or editing more than one line at the same time
   (via multiple-cursors or Can I fond better way for this?)
4. Completion
5. Spell check on-the-fly (both programming or non-programming modes)

** Spell checking
   =flyspell= provides minor modes to check spell on-the-fly.
   #+BEGIN_SRC emacs-lisp
   ;; flyspell-mode does spell-checking on the fly as you type
   (require 'flyspell)
   (setq ispell-program-name "aspell" ; use aspell instead of ispell
         ispell-extra-args '("--sug-mode=ultra"))

   (add-hook 'text-mode-hook 'flyspell-mode)
   (add-hook 'prog-mode-hook 'flyspell-prog-mode)
   #+END_SRC
** Save last edit place
   #+BEGIN_SRC emacs-lisp
   ;; Save point position between sessions
   (require 'saveplace)
   (setq-default save-place t)
   (setq save-place-file (expand-file-name ".places" user-emacs-directory))
   #+END_SRC
** Undo
   Undo tree
   #+BEGIN_SRC emacs-lisp
   (global-undo-tree-mode)
   #+END_SRC
** Expand Region
   #+BEGIN_SRC emacs-lisp
   (require 'expand-region)
   (global-set-key (kbd "C-=") 'er/expand-region)
   #+END_SRC
* UI

** Font
   Set English font
   #+BEGIN_SRC emacs-lisp
   ;; Setting English Font
   (if (member "Monaco" (font-family-list))
       (set-face-attribute
        'default nil :font "Monaco 13"))
   #+END_SRC

** Color theme & Mode line
   #+BEGIN_SRC emacs-lisp
   ;; Enable moe-themem
   ;; (require 'moe-theme)
   ;; (moe-dark)
   ;; Resize titles
   ;; (setq moe-theme-resize-markdown-title '(2.0 1.7 1.5 1.3 1.0 1.0))
   ;; (setq moe-theme-resize-org-title '(2.2 1.8 1.6 1.4 1.2 1.0 1.0 1.0 1.0))
   ;; Mode line Color
   ;; (moe-theme-set-color 'cyan)
   ;; Powerline
   ;; (powerline-moe-theme)

   (show-paren-mode t)
   ;; (setq show-paren-style 'expression)

   #+END_SRC

** Scroll bar
   yascroll-bar
   #+BEGIN_SRC emacs-lisp
   ;; (global-yascroll-bar-mode 1)
   #+END_SRC

** Dired Mode
   Add hightlights in dired
   #+BEGIN_SRC emacs-lisp
   (require 'dired-k)
   (define-key dired-mode-map (kbd "K") 'dired-k)
   #+END_SRC

   Make dired less verbose
   #+BEGIN_SRC emacs-lisp
   (require 'dired-details)
   (setq-default dired-details-hidden-string "--- ")
   (dired-details-install)
   #+END_SRC

** Other
   #+BEGIN_SRC emacs-lisp
   ;; Colorful brackets
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
* Misc
  #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function #'ignore)

  ;; Set badckup directory to ~/.emacs.d/backups/
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))


  ;; auto insert pairs
  (electric-pair-mode 1)

  ;; "yes or no" => 'y or n"
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; dired
  (require 'dired-x)
  (setq-default dired-omit-files-p t) ; Buffer-local variable
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  #+END_SRC

** Mac OS X specified
   #+BEGIN_SRC emacs-lisp
   (when (eq system-type 'darwin)
     ;; swap <command> and <alt>
     (setq mac-command-modifier 'meta)
     (setq mac-option-modifier 'control)
     ;; Fix PATH
     (exec-path-from-shell-initialize))
   #+END_SRC

** Load custom.el
   #+BEGIN_SRC emacs-lisp
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (load custom-file 'noerror)
   #+END_SRC
